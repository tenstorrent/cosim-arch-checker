// Licensed under the Apache License, Version 2.0, see LICENSE.TT for details

#pragma once

#include <stdint.h>


enum WhisperMessageType { Peek, Poke, Step, Until, Change, ChangeCount,
                          Quit, Invalid, Reset, Exception, EnterDebug,
                          ExitDebug, LoadFinished, CancelDiv, CancelLr,
                          DumpMemory, McmRead, McmInsert, McmWrite };

// Be careful changing this: test-bench file (defines.svh) needs to be
// updated.
enum WhisperExceptionType { InstAccessFault, DataAccessFault,
                            ImpreciseStoreFault, ImpreciseLoadFault,
                            PreciseStoreFault, PreciseLoadFault, 
                            NonMaskableInterrupt };


/// Structure used to communicate with the whisper program using
/// sockets.  When a ChangeCount message is returned by whisper (as a
/// reply to a Step or a ChangeCount request), the address is set to
/// the program-counter of the last executed instruction, the resource
/// is set to the opcode of that instruction and the value is set to
/// the number of change records generated by that instruction.
struct WhisperMessage
{
#ifdef __cplusplus
  WhisperMessage(uint32_t hart = 0, WhisperMessageType type = Invalid,
		 uint32_t resource = 0, uint64_t address = 0, 
		 uint64_t value = 0, uint32_t size = 0, uint64_t instrTag = 0,
		 uint64_t time = 0)
    : hart(hart), type(type), resource(resource), size(size), flags(0),
      instrTag(instrTag), time(time), address(address), value(value)
  {
    buffer[0] = 0;
    tag[0] = 0;
  }
#endif

  uint32_t hart;
  uint32_t type;
  uint32_t resource;
  uint32_t size;
  uint32_t flags;
  uint64_t instrTag; // Instruction tag.
  uint64_t time;     // Time stamp.
  uint64_t address;
  uint64_t value;
  char buffer[128];
  char tag[20];
};
